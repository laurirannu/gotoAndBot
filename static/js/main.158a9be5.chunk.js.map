{"version":3,"sources":["icons/robot.jpg","icons/right-arrow.svg","Header/Header.js","Input/Input.js","Messages/Messages.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","require","alt","React","Component","Input","state","text","e","this","setState","target","value","preventDefault","props","onSendMessage","_this2","onSubmit","onChange","type","placeholder","autoFocus","Messages","renderMessage","message","key","username","date","messageFromMe","_this","currentUser","toTimeString","substring","messages","map","m","App","botName","concat","Date","weatherHandler","_callee","location","apiCall","response","regenerator_default","wrap","_context","prev","next","fetch","sent","json","cod","addNewMessage","name","sys","country","weather","main","temp","stop","messagesHandler","toLowerCase","loc","length","expression","out","math","err","user","prevState","Object","toConsumableArray","window","scrollTo","document","body","scrollHeight","src_Header_Header","src_Messages_Messages","src_Input_Input","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.158a9be5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.ba6b288f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/right-arrow.93812a68.svg\";","import React from 'react';\r\nimport '../Header/Header.css'\r\n\r\nclass Header extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"header\">\r\n                <img src={require(\"../icons/robot.jpg\")} alt=\"logo\" className=\"pic\" />\r\n                <p className=\"name\">gotoAndBot</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../Input/Input.css'\r\n\r\nclass Input extends React.Component {\r\n    state = {\r\n        text: \"\"\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ text: e.target.value });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.setState({ text: \"\" });\r\n        this.props.onSendMessage(this.state.text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={e => this.onSubmit(e)} className=\"input-wrapper\">\r\n                <input\r\n                    onChange={e => this.onChange(e)}\r\n                    value={this.state.text}\r\n                    type=\"text\"\r\n                    placeholder=\"Write something...\"\r\n                    autoFocus={true}\r\n                    className=\"input\"\r\n                />\r\n                <button type=\"submit\" className=\"input__arrow\">\r\n                    <img src={require(\"../icons/right-arrow.svg\")} alt=\"right-arrow\" />\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\nimport './Messages.css'\r\n\r\nclass Messages extends React.Component {\r\n    renderMessage = (message, key) => {\r\n        const { username, text, date } = message;\r\n        const { currentUser } = this.props;\r\n        const messageFromMe = username === currentUser; //võrdlen, kas sõnum on kasutajalt\r\n        const className = messageFromMe ? //vastavalt eelnevale võrdlusele tekitan klassinime, et CSSis muuta sõnumite asukohti\r\n            \"message message--user\" : \"message message--bot\";\r\n        return (\r\n            <li className={className} key={key}> \r\n                {!messageFromMe && <img src={require(\"../icons/robot.jpg\")} alt = \"logo\" className=\"bot-image\" />}\r\n                <div className=\"message__content\">\r\n                    <div className=\"message__username\">\r\n                        <span>{username}</span>\r\n                        <span className=\"message__date\">{date.toTimeString().substring(0,5)}</span>\r\n                    </div>\r\n                    <div className=\"message__text\">{text}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { messages } = this.props;\r\n        return (\r\n            <ul className=\"messages-wrapper\">\r\n                {messages.map((m, key) => this.renderMessage(m, key))}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Messages;","import React, { Component } from 'react';\r\nimport * as math from 'mathjs';\r\n\r\nimport Header from './Header/Header';\r\nimport Input from './Input/Input'\r\nimport Messages from './Messages/Messages';\r\n\r\nclass App extends Component {\r\n\r\n  botName = \"gotoAndBot\";\r\n\r\n  state = {\r\n    messages: [\r\n      {\r\n        text: `Hello, my name is ${this.botName} and I know the following commands: /weather and /calc (i.e. /weather tartu, /calc 5+5)`,\r\n        username: this.botName,\r\n        date: new Date()\r\n      }\r\n    ],\r\n    username: \"Me\"\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    //uute sõnumite lisamisel näidatakse automaatselt uusimaid sõnumeid\r\n    if (prevState.messages !== this.state.messages) {\r\n      window.scrollTo(0, document.body.scrollHeight);\r\n    }\r\n  }\r\n\r\n  weatherHandler = async (location) => {\r\n    //otsin APIst vastavat asukohta ning kuvan info või annan kasutajale teada vigase sisendi kohta\r\n    //(response.cod on ühel juhul antud stringina, teisel arvuna, see on API kala)\r\n    const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&APPID=b726b1f2856f8f8529633a409e58de2e`);\r\n    const response = await apiCall.json();\r\n    if (response.cod === 200) {\r\n      this.addNewMessage(`Weather currently in ${response.name}, ${response.sys.country}: \r\n      ${response.weather[0].main}, ${response.main.temp}°C`, this.botName)\r\n    }\r\n\r\n    else if (response.cod === \"404\") {\r\n      this.addNewMessage(\"I don't know that location!\", this.botName);\r\n    }\r\n  }\r\n\r\n  messagesHandler = (message) => {\r\n    //kontrollin, mida kasutaja kirjutas ning käitun vastavalt\r\n    if (message.substring(0, 8).toLowerCase() === \"/weather\") {\r\n      var loc = message.substring(8, message.length);\r\n      this.weatherHandler(loc);\r\n    } else if (message.substring(0, 5).toLowerCase() === \"/calc\") {\r\n      var expression = message.substring(5, message.length);\r\n      try {\r\n        //siin kasutan mathjs-i meetodit eval, mis teeb täpselt seda, mis ülesandes palutud\r\n        //(arvutab kasutaja sisendist ehk stringist tulemuse)\r\n        var out = math.eval(expression);\r\n        this.addNewMessage(`The answer is: ${out}`, this.botName);\r\n      }\r\n      catch (err) {\r\n        this.addNewMessage(\"I'm sorry, I didn't quite understand that, please type your input in a style like: '/calc 5+5'\", this.botName);\r\n      }\r\n    } else {\r\n      this.addNewMessage(\"I'm sorry, I can't understand simple text, please use /weather or /calc\", this.botName);\r\n      //Siia lisaksin chatbot API calli, mis vastaks juhul,\r\n      //kui kasutaja sõnum ei alga etteantud käsuga.\r\n    }\r\n  }\r\n\r\n  addNewMessage = (message, user) => {\r\n    //kuna muudan tihti state, aga alati sama loogika põhjal, siis tegin selleks funktsiooni\r\n    this.setState((prevState) => {\r\n      return {\r\n        messages: [...prevState.messages, {\r\n          text: message,\r\n          username: user,\r\n          date: new Date()\r\n        }],\r\n      }\r\n    });\r\n  }\r\n\r\n  onSendMessage = (message) => {\r\n    //kõigepealt kuvan kasutaja sisestatud sõnumi vestluses\r\n    //ning siis hakkan seda sisendit uurima ja vastavalt käituma\r\n    if (message) {\r\n      this.addNewMessage(message, this.state.username);\r\n      this.messagesHandler(message);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Messages\r\n          messages={this.state.messages}\r\n          currentUser={this.state.username}\r\n        />\r\n        <Input\r\n          onSendMessage={this.onSendMessage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}