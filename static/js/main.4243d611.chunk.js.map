{"version":3,"sources":["icons/robot.jpg","icons/right-arrow.svg","Header/Header.js","Input/Input.js","Messages/Messages.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","require","alt","React","Component","Input","state","text","e","this","setState","target","value","preventDefault","props","onSendMessage","_this2","onSubmit","onChange","type","placeholder","autoFocus","Messages","renderMessage","message","key","username","date","messageFromMe","_this","currentUser","toTimeString","substring","messages","map","m","App","botName","concat","Date","weatherHandler","_callee","location","apiCall","response","regenerator_default","wrap","_context","prev","next","fetch","sent","json","cod","addNewMessage","name","sys","country","weather","main","temp","stop","messagesHandler","toLowerCase","loc","length","expression","out","math","err","user","prevState","Object","toConsumableArray","prevProps","window","scrollTo","document","body","scrollHeight","src_Header_Header","src_Messages_Messages","src_Input_Input","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4243d611.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.ba6b288f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/right-arrow.0b974ee6.svg\";","import React from 'react';\r\nimport '../Header/Header.css'\r\n\r\nclass Header extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className = \"header\">\r\n                <img src={require(\"../icons/robot.jpg\")} alt = \"logo\" className=\"pic\" />\r\n                <p className=\"name\">gotoAndBot</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../Input/Input.css'\r\n\r\nclass Input extends React.Component {\r\n    state = {\r\n        text: \"\"\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ text: e.target.value });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.setState({ text: \"\" });\r\n        this.props.onSendMessage(this.state.text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={e => this.onSubmit(e)} className=\"input-wrapper\">\r\n                <input\r\n                    onChange={e => this.onChange(e)}\r\n                    value={this.state.text}\r\n                    type=\"text\"\r\n                    placeholder=\"Write something...\"\r\n                    autoFocus={true}\r\n                    className=\"input\"\r\n                />\r\n                <button type=\"submit\" className=\"input__arrow\">\r\n                    <img src={require(\"../icons/right-arrow.svg\")} alt=\"right-arrow\" />\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\nimport './Messages.css'\r\n\r\nclass Messages extends React.Component {\r\n    renderMessage = (message, key) => {\r\n        const { username, text, date } = message;\r\n        const { currentUser } = this.props;\r\n        const messageFromMe = username === currentUser; //võrdlen, kas sõnum on kasutajalt\r\n        const className = messageFromMe ? //vastavalt eelnevale võrdlusele tekitan klassinime, et CSSis muuta sõnumite asukohti\r\n            \"message message--user\" : \"message message--bot\";\r\n        return (\r\n            <li className={className} key={key}> \r\n                {!messageFromMe && <img src={require(\"../icons/robot.jpg\")} alt = \"logo\" className=\"bot-image\" />}\r\n                <div className=\"message__content\">\r\n                    <div className=\"message__username\">\r\n                        <span>{username}</span>\r\n                        <span className=\"message__date\">{date.toTimeString().substring(0,5)}</span>\r\n                    </div>\r\n                    <div className=\"message__text\">{text}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { messages } = this.props;\r\n        return (\r\n            <ul className=\"messages-wrapper\">\r\n                {messages.map((m, key) => this.renderMessage(m, key))}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Messages;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header/Header';\nimport Input from './Input/Input'\nimport Messages from './Messages/Messages';\nimport * as math from 'mathjs'\n\nclass App extends Component {\n\n  botName = \"gotoAndBot\";\n\n  state = {\n    messages: [\n      {\n        text: `Hello, my name is ${this.botName} and I know the following commands: /weather and /calc (i.e. /weather tartu, /calc 5+5)`,\n        username: this.botName,\n        date: new Date()\n      }\n    ],\n    username: \"Me\"\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //uute sõnumite lisamisel näidatakse automaatselt uusimaid sõnumeid\n    if (prevState.messages !== this.state.messages) {\n      window.scrollTo(0, document.body.scrollHeight);\n    }\n  }\n\n  weatherHandler = async (location) => {\n    //otsin APIst vastavat asukohta ning kuvan info või annan kasutajale teada vigase sisendi kohta\n    //(response.cod on ühel juhul antud stringina, teisel arvuna, see on API kala)\n    const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&APPID=b726b1f2856f8f8529633a409e58de2e`);\n    const response = await apiCall.json();\n    if (response.cod === 200) {\n      this.addNewMessage(`Weather currently in ${response.name}, ${response.sys.country}: \n      ${response.weather[0].main}, ${response.main.temp}°C`, this.botName)\n    }\n\n    else if (response.cod === \"404\") {\n      this.addNewMessage(\"I don't know that location!\", this.botName);\n    }\n  }\n\n  messagesHandler = (message) => {\n    //kontrollin, mida kasutaja kirjutas ning käitun vastavalt\n    if (message.substring(0, 8).toLowerCase() === \"/weather\") {\n      var loc = message.substring(8, message.length);\n      this.weatherHandler(loc);\n    }\n\n    else if (message.substring(0, 5).toLowerCase() === \"/calc\") {\n      var expression = message.substring(5, message.length);\n      try {\n        //siin kasutan mathjs-i meetodit eval, mis teeb täpselt seda, mis ülesandes palutud\n        //(arvutab kasutaja sisendist ehk stringist tulemuse)\n        var out = math.eval(expression);\n        this.addNewMessage(`The answer is: ${out}`, this.botName);\n      }\n      catch (err) {\n        this.addNewMessage(\"I'm sorry, I didn't quite understand that, please type your input in a style like: '/calc 5+5'\", this.botName);\n      }\n    }\n\n    else {\n      this.addNewMessage(\"I'm sorry, I can't understand simple text, please use /weather or /calc\", this.botName);\n      //Siia lisaksin siis mingi chatbot API calli, mis vastaks juhul,\n      //kui kasutaja sõnum ei alga etteantud käsuga.\n      //(kuid kahjuks on kõik minu leitud APId tasulised)\n    }\n  }\n\n  addNewMessage = (message, user) => {\n    //kuna muudan tihti state, aga alati sama loogika põhjal, siis tegin selleks funktsiooni\n    this.setState((prevState) => {\n      return {\n        messages: [...prevState.messages, {\n          text: message,\n          username: user, \n          date: new Date()\n        }],\n      }\n    });\n  }\n\n  onSendMessage = (message) => {\n    //kõigepealt kuvan kasutaja sisestatud sõnumi vestluses\n    //ning siis hakkan seda sisendit uurima ja vastavalt käituma\n    if (message) {\n      this.addNewMessage(message, \"Me\");\n      this.messagesHandler(message);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Messages\n          messages={this.state.messages}\n          currentUser={this.state.username}\n        />\n        <Input\n          onSendMessage={this.onSendMessage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}